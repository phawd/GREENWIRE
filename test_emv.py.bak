#!/usr/bin/env python3
"""
EMV Integration Test Suite
==========================
Test the GREENWIRE EMV data integration modules
"""

import sys
import os

def test_emv_commands():
    """Test EMV commands module"""
    print("Testing EMV Commands module...")
    try:
        from emv_data.commands.emv_commands import EMVCommand, EMV_COMMANDS, get_emv_command, list_emv_commands
        
        # Test basic functionality
        commands = list_emv_commands()
        print(f"✓ Found {len(commands)} EMV commands")
        
        # Test specific command
        select_cmd = get_emv_command("SELECT")
        if select_cmd:
            print(f"✓ SELECT command: {select_cmd.name} - {select_cmd.description}")
        else:
            print("✗ SELECT command not found")
            
        return True
    except Exception as e:
        print(f"✗ EMV Commands module failed: {e}")
        return False

def test_apdu_responses():
    """Test APDU responses module"""
    print("\nTesting APDU Responses module...")
    try:
        from emv_data.commands.apdu_responses import APDUResponse, get_apdu_response, is_success, list_response_codes
        
        # Test basic functionality
        codes = list_response_codes()
        print(f"✓ Found {len(codes)} APDU response codes")
        
        # Test specific response
        success_response = get_apdu_response("9000")
        if success_response:
            print(f"✓ Success response: {success_response.code} - {success_response.description}")
        else:
            print("✗ Success response not found")
            
        # Test success check
        if is_success("9000"):
            print("✓ Success check working")
        else:
            print("✗ Success check failed")
            
        return True
    except Exception as e:
        print(f"✗ APDU Responses module failed: {e}")
        return False

def test_hsm_commands():
    """Test HSM commands module"""
    print("\nTesting HSM Commands module...")
    try:
        from emv_data.commands.hsm_commands import HSMCommand, HSM_COMMANDS, get_vendor_commands
        
        # Test basic functionality
        thales_commands = get_vendor_commands("Thales")
        print(f"✓ Found {len(thales_commands)} Thales HSM commands")
        
        safenet_commands = get_vendor_commands("SafeNet")
        print(f"✓ Found {len(safenet_commands)} SafeNet HSM commands")
        
        atalla_commands = get_vendor_commands("Atalla")
        print(f"✓ Found {len(atalla_commands)} Atalla HSM commands")
            
        return True
    except Exception as e:
        print(f"✗ HSM Commands module failed: {e}")
        return False

def test_emv_integration():
    """Test EMV integration interface"""
    print("\nTesting EMV Integration interface...")
    try:
        from emv_data.emv_integration import GREENWIREEMVInterface
        
        # Initialize interface
        emv_interface = GREENWIREEMVInterface()
        print("✓ EMV interface initialized")
        
        # Test getting command
        select_cmd = emv_interface.get_emv_command("SELECT")
        if select_cmd:
            print(f"✓ Retrieved EMV command: {select_cmd.name}")
        
        # Test APDU response
        response = emv_interface.parse_apdu_response("9000")
        if response and 'description' in response:
            print(f"✓ Parsed APDU response: {response['description']}")
        
        # Test HSM command
        hsm_cmd = emv_interface.get_hsm_command("Thales", "A0")
        if hsm_cmd:
            print(f"✓ Retrieved HSM command: {hsm_cmd.description}")
        
        return True
    except Exception as e:
        print(f"✗ EMV Integration interface failed: {e}")
        return False

def main():
    """Run all tests"""
    print("=" * 50)
    print("GREENWIRE EMV Integration Test Suite")
    print("=" * 50)
    
    tests = [
        test_emv_commands,
        test_apdu_responses,
        test_hsm_commands,
        test_emv_integration
    ]
    
    passed = 0
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"Test Results: {passed}/{len(tests)} tests passed")
    
    if passed == len(tests):
        print("✓ All EMV integration modules working correctly!")
    else:
        print("✗ Some tests failed - check module integrity")
    
    return passed == len(tests)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)